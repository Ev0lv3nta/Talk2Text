import asyncio # –û—Å—Ç–∞–≤–ª—è–µ–º, —Ç.–∫. python-telegram-bot –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
import os
import logging
from dotenv import load_dotenv
# --- –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
from pydub import AudioSegment
import io
from telegram import Update, Audio # –î–æ–±–∞–≤–ª–µ–Ω Audio
from telegram.constants import ParseMode # –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler, # –î–æ–±–∞–≤–ª–µ–Ω ConversationHandler
)
# --- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Gemini ---
from google import genai
from google.genai import types

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∏–º —Å–ø–∞–º

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler (–Ω–æ–≤–æ–µ) ---
ASKING_VOICE_FOR_CONVERSION = 1

# --- –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")

if not all([TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, LOG_CHANNEL_ID]):
    logging.critical("CRITICAL: Required environment variables are not set.")
    raise EnvironmentError("Required environment variables are not set.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini (–ö–ê–ö –í –°–ê–ú–û–ú –ü–ï–†–í–û–ú –ö–û–î–ï) ---
try:
    client = genai.Client(api_key=GEMINI_API_KEY)
    if client is None:
         raise ValueError("Gemini client initialization returned None.")
    logging.info("Gemini client initialized successfully using genai.Client().")
except Exception as e:
    logging.critical(f"CRITICAL: Failed to initialize Gemini client: {e}")
    raise

# --- –§—É–Ω–∫—Ü–∏–∏ ---

# --- –§—É–Ω–∫—Ü–∏—è log_to_channel (–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê) ---
async def log_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE, response_text: str = None):
    # (–ö–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∑—è—Ç –∏–∑ —Ç–≤–æ–µ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω —á—É—Ç—å –ø–æ–ª–Ω–µ–µ —á–µ–º –≤ –ø–µ—Ä–≤–æ–º)
    if not update.message:
        logging.warning("log_to_channel called without update.message")
        return
    try:
        await context.bot.forward_message(
            chat_id=LOG_CHANNEL_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
        if response_text:
            user_info = update.message.from_user
            log_prefix = f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è {user_info.full_name} (ID: {user_info.id})"
            max_len = 4096
            if len(response_text) > max_len:
                response_text = response_text[:max_len-len("... (–æ–±—Ä–µ–∑–∞–Ω–æ)")] + "... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            await context.bot.send_message(
                chat_id=LOG_CHANNEL_ID,
                text=f"{log_prefix}:\n\n{response_text}"
            )
    except Exception as e:
        logging.error(f"Log channel error: {e}. Update: {update.to_dict()}")

# --- –§—É–Ω–∫—Ü–∏—è start (–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê, —á—É—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ (OGG).\n"
        "- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–≥–ª—è—à–∫–∏).\n"
        "- –°—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.\n"
        "- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ MP3 (–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /convert)." # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        )
    # await log_to_channel(update, context) # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

# --- –§—É–Ω–∫—Ü–∏—è handle_voice (–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –õ–û–ì–ò–ö–ò) ---
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    user_id = update.message.from_user.id
    processing_msg = await update.message.reply_text("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...", reply_to_message_id=update.message.message_id)
    path = f"voice_{user_id}_{voice.file_unique_id}.ogg" # –î–æ–±–∞–≤–∏–º user_id
    logging.info(f"Handling voice from user {user_id}")
    try:
        file = await context.bot.get_file(voice.file_id)
        await file.download_to_drive(path)
        with open(path, "rb") as f:
            audio = f.read()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–∑–æ–≤—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        tr = client.models.generate_content(
            model="gemini-2.0-flash", # –¢–≤–æ—è –º–æ–¥–µ–ª—å
            contents=["–°–¥–µ–ª–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∞—É–¥–∏–æ", types.Part.from_bytes(data=audio, mime_type="audio/ogg")],
            # config=types.GenerateContentConfig(max_output_tokens=800) # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥
        )
        sm = client.models.generate_content(
            model="gemini-2.0-flash", # –¢–≤–æ—è –º–æ–¥–µ–ª—å
            contents=["–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏–æ", types.Part.from_bytes(data=audio, mime_type="audio/ogg")],
            # config=types.GenerateContentConfig(max_output_tokens=600) # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥
        )
        text = f"üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:\n{tr.text}\n\nüìå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{sm.text}"
        await processing_msg.edit_text(text) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await log_to_channel(update, context, text)
    except Exception as e:
        logging.error(f"Error in handle_voice for user {user_id}: {e}", exc_info=True)
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        await log_to_channel(update, context, f"–û—à–∏–±–∫–∞ handle_voice: {e}")
    finally:
        if os.path.exists(path):
            os.remove(path)

# --- –§—É–Ω–∫—Ü–∏—è handle_video_note (–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –õ–û–ì–ò–ö–ò) ---
async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video = update.message.video_note
    user_id = update.message.from_user.id
    processing_msg = await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ...", reply_to_message_id=update.message.message_id)
    path = f"video_{user_id}_{video.file_unique_id}.mp4" # –î–æ–±–∞–≤–∏–º user_id
    logging.info(f"Handling video_note from user {user_id}")
    try:
        file = await context.bot.get_file(video.file_id)
        await file.download_to_drive(path)
        with open(path, "rb") as f:
            video_bytes = f.read()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–∑–æ–≤—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        tr = client.models.generate_content(
            model="gemini-2.0-flash", # –¢–≤–æ—è –º–æ–¥–µ–ª—å
            contents=["–°–¥–µ–ª–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏", types.Part.from_bytes(data=video_bytes, mime_type="video/mp4")],
            # config=types.GenerateContentConfig(max_output_tokens=800)
        )
        visual = client.models.generate_content(
            model="gemini-2.0-flash", # –¢–≤–æ—è –º–æ–¥–µ–ª—å
            contents=["–û–ø–∏—à–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏", types.Part.from_bytes(data=video_bytes, mime_type="video/mp4")],
            # config=types.GenerateContentConfig(max_output_tokens=800)
        )
        sm = client.models.generate_content(
            model="gemini-2.0-flash", # –¢–≤–æ—è –º–æ–¥–µ–ª—å
            contents=["–°–¥–µ–ª–∞–π –æ–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", types.Part.from_bytes(data=video_bytes, mime_type="video/mp4")],
            # config=types.GenerateContentConfig(max_output_tokens=800)
        )
        text = f"üìÑ –ê—É–¥–∏–æ:\n{tr.text}\n\nüñºÔ∏è –í–∏–∑—É–∞–ª:\n{visual.text}\n\nüìå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{sm.text}"
        await processing_msg.edit_text(text) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await log_to_channel(update, context, text)
    except Exception as e:
        logging.error(f"Error in handle_video_note for user {user_id}: {e}", exc_info=True)
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        await log_to_channel(update, context, f"–û—à–∏–±–∫–∞ handle_video_note: {e}")
    finally:
        if os.path.exists(path):
            os.remove(path)

# --- –§—É–Ω–∫—Ü–∏—è handle_text (–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ö–û–î–ê, –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –õ–û–ì–ò–ö–ò) ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    processing_msg = await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...", reply_to_message_id=update.message.message_id)
    logging.info(f"Handling text from user {user_id}")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–∑–æ–≤—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        sm = client.models.generate_content(
            model="gemini-2.0-flash", # –¢–≤–æ—è –º–æ–¥–µ–ª—å
            contents=["–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", text],
            # config=types.GenerateContentConfig(max_output_tokens=600)
        )
        reply = f"üìå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{sm.text}"
        await processing_msg.edit_text(reply) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await log_to_channel(update, context, reply)
    except Exception as e:
        logging.error(f"Error in handle_text for user {user_id}: {e}", exc_info=True)
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await log_to_channel(update, context, f"–û—à–∏–±–∫–∞ handle_text: {e}")

# --- –ù–û–í–´–ï –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OGG –≤ MP3 ---

async def ask_for_voice_to_convert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    await update.message.reply_text("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç .ogg), –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ MP3.")
    return ASKING_VOICE_FOR_CONVERSION

async def convert_ogg_to_mp3_and_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç MP3."""
    # (–ö–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Ä–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –≤–µ—Ä—Å–∏–π)
    voice = update.message.voice
    if not voice:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel.")
        return ASKING_VOICE_FOR_CONVERSION

    file_id = voice.file_id
    unique_id = voice.file_unique_id
    user_id = update.message.from_user.id

    ogg_path = f"voice_conv_{user_id}_{unique_id}.ogg" # –ù–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏–º –∏–º—è —Ñ–∞–π–ª–∞
    mp3_path = f"voice_conv_{user_id}_{unique_id}.mp3"

    processing_msg = await update.message.reply_text("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é OGG –≤ MP3...", reply_to_message_id=update.message.message_id)
    logging.info(f"Starting conversion for user {user_id}, file_id {file_id}")

    try:
        voice_file = await context.bot.get_file(file_id)
        await voice_file.download_to_drive(ogg_path)
        logging.info(f"Downloaded OGG file for conversion: {ogg_path}")

        audio = AudioSegment.from_ogg(ogg_path)
        logging.info(f"Loaded OGG for conversion, duration: {len(audio) / 1000.0}s")
        audio.export(mp3_path, format="mp3")
        logging.info(f"Exported MP3 file: {mp3_path}")

        with open(mp3_path, "rb") as mp3_file:
            await context.bot.send_audio(
                chat_id=update.message.chat_id,
                audio=mp3_file,
                title=f"Converted_{unique_id}.mp3",
                caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à MP3 —Ñ–∞–π–ª.",
                reply_to_message_id=update.message.message_id
            )
        await processing_msg.delete()
        logging.info(f"Sent converted MP3 file to user {user_id}")
        await log_to_channel(update, context, response_text="[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª MP3 —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏]")

    except FileNotFoundError:
        logging.error(f"FFmpeg/FFprobe not found during conversion for user {user_id}.")
        await processing_msg.edit_text("üö´ –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω FFmpeg. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        await log_to_channel(update, context, response_text="[–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω]")
    except Exception as e:
        logging.error(f"Error converting OGG to MP3 for user {user_id}: {e}", exc_info=True)
        await processing_msg.edit_text(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await log_to_channel(update, context, response_text=f"[–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}]")
    finally:
        if os.path.exists(ogg_path):
            os.remove(ogg_path)
            logging.info(f"Removed temporary conversion OGG file: {ogg_path}")
        if os.path.exists(mp3_path):
            os.remove(mp3_path)
            logging.info(f"Removed temporary conversion MP3 file: {mp3_path}")

    return ConversationHandler.END

async def cancel_conversion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logging.info(f"Conversion cancelled by user {update.message.from_user.id}")
    return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏—è main (–î–û–ë–ê–í–õ–ï–ù ConversationHandler) ---
def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logging.info("Starting bot application...")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # --- –ù–û–í–´–ô Conversation Handler –¥–ª—è /convert ---
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("convert", ask_for_voice_to_convert)],
        states={
            ASKING_VOICE_FOR_CONVERSION: [MessageHandler(filters.VOICE, convert_ogg_to_mp3_and_reply)]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversion)],
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –º–µ–¥–∏–∞
    app.add_handler(conv_handler)

    # --- –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    app.add_handler(CommandHandler("start", start))
    # –í–∞–∂–Ω–æ: –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ª–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ, –ø–æ–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–∏–∞–ª–æ–≥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    # ConversationHandler –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Ç–∞–∫ —á—Ç–æ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.
    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ handle_voice.
    app.add_handler(MessageHandler(filters.VOICE & ~filters.COMMAND, handle_voice))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE & ~filters.COMMAND, handle_video_note))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logging.info("Bot polling started.")
    app.run_polling()

# --- –ó–∞–ø—É—Å–∫ main ---
if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.critical(f"CRITICAL: Unhandled exception in __main__: {e}", exc_info=True)
