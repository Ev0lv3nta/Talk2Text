import asyncio
import os
import logging
from dotenv import load_dotenv
from google import genai
from google.genai import types
from telegram import Update, Audio # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Audio
from telegram.constants import ParseMode # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç ParseMode –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from telegram.ext import filters
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler # –î–æ–±–∞–≤–ª–µ–Ω ConversationHandler
from pydub import AudioSegment # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç pydub
import io # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç io

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler ---
ASKING_VOICE_FOR_CONVERSION = 1

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")

if not all([TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, LOG_CHANNEL_ID]):
    raise EnvironmentError("Required environment variables are not set.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ genai –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
try:
    genai.configure(api_key=GEMINI_API_KEY)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
    # 'gemini-pro' –∏–ª–∏ 'gemini-1.5-flash' –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è
    # 'gemini-1.0-pro' –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ–ø—Ü–∏–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    gemini_model_text = "gemini-1.0-pro" # –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    gemini_model_multimodal = "gemini-1.5-flash" # –ú–æ–¥–µ–ª—å –¥–ª—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å generate_content –Ω–∞–ø—Ä—è–º—É—é)
    text_model = genai.GenerativeModel(gemini_model_text)
    multimodal_model = genai.GenerativeModel(gemini_model_multimodal)

except AttributeError:
    logging.error("Could not configure genai. Check google-genai library version and API key.")
    # –í —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –º–æ–≥–ª–æ –±—ã—Ç—å client = genai.Client(api_key=...)
    # –ù–æ —Å–µ–π—á–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è genai.configure() –∏ genai.GenerativeModel()
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é google-generativeai, –∫–æ–¥ –Ω–∏–∂–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    multimodal_model = None # –∏–ª–∏ fallback
    text_model = None

async def log_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE, response_text: str = None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è /start)
    if not update.message:
        logging.warning("log_to_channel called without update.message")
        return
    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.forward_message(
            chat_id=LOG_CHANNEL_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
        # –ï—Å–ª–∏ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if response_text:
            user_info = update.message.from_user
            log_prefix = f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è {user_info.full_name} (ID: {user_info.id})"
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            max_len = 4096
            if len(response_text) > max_len:
                 # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–µ–∑–∫–∞, –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                response_text = response_text[:max_len-len("... (–æ–±—Ä–µ–∑–∞–Ω–æ)")] + "... (–æ–±—Ä–µ–∑–∞–Ω–æ)"

            await context.bot.send_message(
                chat_id=LOG_CHANNEL_ID,
                text=f"{log_prefix}:\n\n{response_text}"
            )
    except Exception as e:
        logging.error(f"Log channel error: {e}. Update: {update.to_dict()}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ (OGG).\n"
        "- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–≥–ª—è—à–∫–∏).\n"
        "- –°—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.\n"
        "- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ MP3 (–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /convert)."
        )
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /start, –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ
    # await log_to_channel(update, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not text_model:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å Gemini –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    original_text = update.message.text
    processing_msg = await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...", reply_to_message_id=update.message.message_id)

    try:
        prompt = f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n\n{original_text}"
        response = await text_model.generate_content_async(prompt) # –ò—Å–ø–æ–ª—å–∑—É–µ–º async

        summary_text = response.text
        reply = f"üìå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{summary_text}"

        await processing_msg.edit_text(reply) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        await log_to_channel(update, context, reply)

    except Exception as e:
        logging.error(f"Error processing text with Gemini: {e}")
        await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")
        await log_to_channel(update, context, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OGG –≤ MP3 ---

async def ask_for_voice_to_convert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    await update.message.reply_text("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç .ogg), –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ MP3.")
    return ASKING_VOICE_FOR_CONVERSION # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ

async def convert_ogg_to_mp3_and_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç MP3."""
    voice = update.message.voice
    file_id = voice.file_id
    unique_id = voice.file_unique_id
    user_id = update.message.from_user.id

    ogg_path = f"voice_{user_id}_{unique_id}.ogg"
    mp3_path = f"voice_{user_id}_{unique_id}.mp3"

    processing_msg = await update.message.reply_text("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é OGG –≤ MP3...", reply_to_message_id=update.message.message_id)

    try:
        voice_file = await context.bot.get_file(file_id)
        await voice_file.download_to_drive(ogg_path)
        logging.info(f"Downloaded OGG file: {ogg_path}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é pydub
        audio = AudioSegment.from_ogg(ogg_path)
        logging.info(f"Loaded OGG, duration: {len(audio) / 1000.0}s")
        audio.export(mp3_path, format="mp3")
        logging.info(f"Exported MP3 file: {mp3_path}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ MP3 —Ñ–∞–π–ª–∞ –∫–∞–∫ –∞—É–¥–∏–æ
        with open(mp3_path, "rb") as mp3_file:
            await context.bot.send_audio(
                chat_id=update.message.chat_id,
                audio=mp3_file,
                title=f"Converted_{unique_id}.mp3", # –ò–º—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à MP3 —Ñ–∞–π–ª.",
                reply_to_message_id=update.message.message_id
            )
        await processing_msg.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é..."
        logging.info(f"Sent MP3 file to user {user_id}")
        await log_to_channel(update, context, response_text="[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª MP3 —Ñ–∞–π–ª]") # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ

    except FileNotFoundError:
        logging.error(f"FFmpeg/FFprobe not found. Ensure it's installed and in PATH.")
        await processing_msg.edit_text("üö´ –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω FFmpeg. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        await log_to_channel(update, context, response_text="[–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω]")
    except Exception as e:
        logging.error(f"Error converting OGG to MP3: {e}")
        await processing_msg.edit_text(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await log_to_channel(update, context, response_text=f"[–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}]")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(ogg_path):
            os.remove(ogg_path)
            logging.info(f"Removed temporary OGG file: {ogg_path}")
        if os.path.exists(mp3_path):
            os.remove(mp3_path)
            logging.info(f"Removed temporary MP3 file: {mp3_path}")

    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

async def cancel_conversion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π) ---

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è/—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)."""
    if not multimodal_model:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å Gemini –¥–ª—è –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    message = update.message
    file_id = None
    file_unique_id = None
    media_type = None
    mime_type = None
    file_ext = None
    processing_text = ""

    if message.voice:
        media_type = "voice"
        voice = message.voice
        file_id = voice.file_id
        file_unique_id = voice.file_unique_id
        mime_type = "audio/ogg"
        file_ext = "ogg"
        processing_text = "üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ..."
    elif message.video_note:
        media_type = "video_note"
        video = message.video_note
        file_id = video.file_id
        file_unique_id = video.file_unique_id
        mime_type = "video/mp4" # Telegram video notes are mp4
        file_ext = "mp4"
        processing_text = "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ..."
    else:
        logging.warning("handle_media called with non-media message.")
        return # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    path = f"{media_type}_{file_unique_id}.{file_ext}"
    processing_msg = await message.reply_text(processing_text, reply_to_message_id=message.message_id)

    try:
        media_file = await context.bot.get_file(file_id)
        await media_file.download_to_drive(path)
        logging.info(f"Downloaded {media_type} file: {path}")

        with open(path, "rb") as f:
            media_bytes = f.read()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é API, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        tasks = []
        prompts = {}

        if media_type == "voice":
            prompts["transcript"] = "–°–¥–µ–ª–∞–π —Ç–æ—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏."
            prompts["summary"] = "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —ç—Ç–æ–π –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏."
        elif media_type == "video_note":
            prompts["transcript"] = "–°–¥–µ–ª–∞–π —Ç–æ—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ."
            prompts["visuals"] = "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –≤–∏–¥–µ–æ, –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤–∏–¥–Ω—ã, –∫–∞–∫–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞."
            prompts["summary"] = "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ, –æ–±—ä–µ–¥–∏–Ω–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞—É–¥–∏–æ –∏ –≤–∏–∑—É–∞–ª–∞."

        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        for key, prompt_text in prompts.items():
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç + –±–∞–π—Ç—ã –º–µ–¥–∏–∞
            content = [prompt_text, types.Part(inline_data=types.Blob(mime_type=mime_type, data=media_bytes))]
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            tasks.append(
                 multimodal_model.generate_content_async(
                    content,
                    # generation_config=genai.types.GenerationConfig(max_output_tokens=800) # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                 )
            )

        # –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response_parts = {}
        idx = 0
        for key in prompts.keys():
            try:
                response_parts[key] = results[idx].text
            except Exception as e:
                logging.error(f"Error getting part '{key}' from Gemini response: {e} | Response: {results[idx]}")
                response_parts[key] = f"[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ '{key}']"
            idx += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        reply_text = ""
        if "transcript" in response_parts:
            reply_text += f"üìÑ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç{' –∞—É–¥–∏–æ' if media_type == 'voice' else ''}:**\n{response_parts['transcript']}\n\n"
        if "visuals" in response_parts:
            reply_text += f"üñºÔ∏è **–í–∏–∑—É–∞–ª:**\n{response_parts['visuals']}\n\n"
        if "summary" in response_parts:
            reply_text += f"üìå **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{response_parts['summary']}"

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        reply_text = reply_text.strip()
        if not reply_text:
             reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞."

        await processing_msg.edit_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        await log_to_channel(update, context, reply_text)

    except Exception as e:
        logging.error(f"Error processing {media_type} with Gemini: {e}")
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {media_type}.")
        await log_to_channel(update, context, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {media_type}: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(path):
            os.remove(path)
            logging.info(f"Removed temporary file: {path}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Conversation Handler –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("convert", ask_for_voice_to_convert)],
        states={
            ASKING_VOICE_FOR_CONVERSION: [MessageHandler(filters.VOICE, convert_ogg_to_mp3_and_reply)]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversion)],
    )

    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏/—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, –≤–∏–¥–µ–æ)
    # –í–∞–∂–Ω–æ: –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å ConversationHandler
    # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º ~filters.UpdateType.EDITED —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã,
    # –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE & ~filters.COMMAND, handle_media)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π handle_media
    app.add_handler(MessageHandler(filters.VIDEO_NOTE & ~filters.COMMAND, handle_media)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π handle_media

    logging.info("Starting bot polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
