import asyncio # asyncio –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è telegram-–±–æ—Ç–∞, –Ω–æ —É–±–∏—Ä–∞–µ–º async –∏–∑ –≤—ã–∑–æ–≤–æ–≤ Gemini
import os
import logging
from dotenv import load_dotenv
from telegram import Update, Audio
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from pydub import AudioSegment
import io

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∏–º —Å–ø–∞–º –æ—Ç httpx –≤ –ª–æ–≥–∞—Ö

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler ---
ASKING_VOICE_FOR_CONVERSION = 1

# --- –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
LOG_CHANNEL_ID = os.getenv("LOG_CHANNEL_ID")

if not all([TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, LOG_CHANNEL_ID]):
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–¥ –ø–∞–¥–µ–Ω–∏–µ–º
    logging.critical("CRITICAL: Required environment variables (TELEGRAM_BOT_TOKEN, GEMINI_API_KEY, LOG_CHANNEL_ID) are not set. Exiting.")
    raise EnvironmentError("Required environment variables are not set.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ) ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º google.genai –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ –±—ã–ª–æ –ø–æ—Ö–æ–∂–µ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ
try:
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è
    from google import genai
    from google.genai import types

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ configure, —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±
    genai.configure(api_key=GEMINI_API_KEY)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–∏–ª—è –≤—ã–∑–æ–≤–∞ (—Ö–æ—Ç—è configure –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    # client = genai.Client(api_key=GEMINI_API_KEY) # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —è–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ configure –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    # –ï—Å–ª–∏ genai.generate_text –∏ —Ç.–¥. –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ client, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ
    # –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å client.generate_text(...)
    # –ù–û! –í –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –±—ã–ª–æ client.models.generate_content - –≤–µ—Ä–Ω–µ–º –≠–¢–û–¢ —Å—Ç–∏–ª—å!
    # –ó–Ω–∞—á–∏—Ç, –Ω—É–∂–µ–Ω –∫–ª–∏–µ–Ω—Ç.
    client = genai.GenerativeModel('gemini-pro') # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å, –∏–º—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ –≤—ã–∑–æ–≤–∞—Ö
    # –í–ê–ñ–ù–û: –ò–º—è –º–æ–¥–µ–ª–∏ 'gemini-pro' –∑–¥–µ—Å—å –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å
    # 'gemini-2.0-flash' –≤ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ generate_content –Ω–∏–∂–µ.

    logging.info("Gemini configured successfully.")

except ImportError:
    logging.critical("CRITICAL: Failed to import google.genai. Is the library installed correctly? (`pip show google-genai`)")
    raise
except Exception as e:
    logging.critical(f"CRITICAL: Failed to configure Gemini: {e}. Check API Key and library.")
    raise

# --- –§—É–Ω–∫—Ü–∏–∏ ---

async def log_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE, response_text: str = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª."""
    if not update.message:
        logging.warning("log_to_channel called without update.message")
        return
    try:
        await context.bot.forward_message(
            chat_id=LOG_CHANNEL_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
        if response_text:
            user_info = update.message.from_user
            log_prefix = f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è {user_info.full_name} (ID: {user_info.id})"
            max_len = 4096
            if len(response_text) > max_len:
                response_text = response_text[:max_len-len("... (–æ–±—Ä–µ–∑–∞–Ω–æ)")] + "... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            await context.bot.send_message(
                chat_id=LOG_CHANNEL_ID,
                text=f"{log_prefix}:\n\n{response_text}"
            )
    except Exception as e:
        logging.error(f"Log channel error: {e}. Update: {update.to_dict()}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ (OGG).\n"
        "- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–≥–ª—è—à–∫–∏).\n"
        "- –°—É–º–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.\n"
        "- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ MP3 (–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /convert)."
    )
    # await log_to_channel(update, context) # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."""
    original_text = update.message.text
    processing_msg = await update.message.reply_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...", reply_to_message_id=update.message.message_id)
    log_entry = f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {update.message.from_user.id}:\n{original_text}"
    logging.info(log_entry)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–¢–†–û–ì–û –º–æ–¥–µ–ª—å gemini-2.0-flash –∏ –≤—ã–∑–æ–≤ client.generate_content
        response = client.generate_content(
            # model="gemini-2.0-flash", # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ client –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –Ω–µ–π
            contents=[f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n\n{original_text}"],
            generation_config=genai.types.GenerationConfig(
                # max_output_tokens=600, # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                candidate_count=1, # –û–±—ã—á–Ω–æ –Ω—É–∂–Ω–∞ –æ–¥–Ω–∞ —Å–∞–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
                # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å —Ç—É—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
                 model='gemini-2.0-flash'
            )
         )

        summary_text = response.text
        reply = f"üìå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{summary_text}"

        await processing_msg.edit_text(reply)
        await log_to_channel(update, context, reply)

    except Exception as e:
        logging.error(f"Error processing text with Gemini: {e}")
        await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")
        await log_to_channel(update, context, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")


# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OGG –≤ MP3 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def ask_for_voice_to_convert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    await update.message.reply_text("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç .ogg), –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ MP3.")
    return ASKING_VOICE_FOR_CONVERSION

async def convert_ogg_to_mp3_and_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç MP3."""
    voice = update.message.voice
    if not voice: # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ –≥–æ–ª–æ—Å
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel.")
        return ASKING_VOICE_FOR_CONVERSION # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    file_id = voice.file_id
    unique_id = voice.file_unique_id
    user_id = update.message.from_user.id

    ogg_path = f"voice_{user_id}_{unique_id}.ogg"
    mp3_path = f"voice_{user_id}_{unique_id}.mp3"

    processing_msg = await update.message.reply_text("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é OGG –≤ MP3...", reply_to_message_id=update.message.message_id)
    logging.info(f"Starting conversion for user {user_id}, file_id {file_id}")

    try:
        voice_file = await context.bot.get_file(file_id)
        await voice_file.download_to_drive(ogg_path)
        logging.info(f"Downloaded OGG file: {ogg_path}")

        audio = AudioSegment.from_ogg(ogg_path)
        logging.info(f"Loaded OGG, duration: {len(audio) / 1000.0}s")
        audio.export(mp3_path, format="mp3")
        logging.info(f"Exported MP3 file: {mp3_path}")

        with open(mp3_path, "rb") as mp3_file:
            await context.bot.send_audio(
                chat_id=update.message.chat_id,
                audio=mp3_file,
                title=f"Converted_{unique_id}.mp3",
                caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à MP3 —Ñ–∞–π–ª.",
                reply_to_message_id=update.message.message_id
            )
        await processing_msg.delete()
        logging.info(f"Sent MP3 file to user {user_id}")
        await log_to_channel(update, context, response_text="[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª MP3 —Ñ–∞–π–ª]")

    except FileNotFoundError:
        logging.error(f"FFmpeg/FFprobe not found. Ensure it's installed and in PATH.")
        await processing_msg.edit_text("üö´ –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω FFmpeg. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        await log_to_channel(update, context, response_text="[–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω]")
    except Exception as e:
        logging.error(f"Error converting OGG to MP3: {e}")
        await processing_msg.edit_text(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await log_to_channel(update, context, response_text=f"[–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}]")
    finally:
        if os.path.exists(ogg_path):
            os.remove(ogg_path)
            logging.info(f"Removed temporary OGG file: {ogg_path}")
        if os.path.exists(mp3_path):
            os.remove(mp3_path)
            logging.info(f"Removed temporary MP3 file: {mp3_path}")

    return ConversationHandler.END

async def cancel_conversion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logging.info(f"Conversion cancelled by user {update.message.from_user.id}")
    return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú gemini-2.0-flash) ---

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è/—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)."""
    message = update.message
    file_id = None
    file_unique_id = None
    media_type = None
    mime_type = None
    file_ext = None
    processing_text = ""
    user_id = message.from_user.id

    if message.voice:
        media_type = "voice"
        voice = message.voice
        file_id = voice.file_id
        file_unique_id = voice.file_unique_id
        mime_type = "audio/ogg"
        file_ext = "ogg"
        processing_text = "üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ..."
        logging.info(f"Received voice message from user {user_id}, file_id {file_id}")
    elif message.video_note:
        media_type = "video_note"
        video = message.video_note
        file_id = video.file_id
        file_unique_id = video.file_unique_id
        mime_type = "video/mp4"
        file_ext = "mp4"
        processing_text = "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ..."
        logging.info(f"Received video note from user {user_id}, file_id {file_id}")
    else:
        logging.warning("handle_media called with non-media message.")
        return

    path = f"{media_type}_{user_id}_{file_unique_id}.{file_ext}" # –î–æ–±–∞–≤–∏–º user_id –≤–æ –∏–º—è —Ñ–∞–π–ª–∞
    processing_msg = await message.reply_text(processing_text, reply_to_message_id=message.message_id)

    try:
        media_file = await context.bot.get_file(file_id)
        await media_file.download_to_drive(path)
        logging.info(f"Downloaded {media_type} file: {path}")

        with open(path, "rb") as f:
            media_bytes = f.read()

        # --- –í—ã–∑–æ–≤—ã Gemini API (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è client.generate_content –∏ gemini-2.0-flash) ---
        results = {}
        media_part = types.Part(inline_data=types.Blob(mime_type=mime_type, data=media_bytes))
        model_name_to_use = "gemini-2.0-flash" # –°—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É –º–æ–¥–µ–ª—å

        # 1. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–¥–ª—è –≥–æ–ª–æ—Å–∞ –∏ –≤–∏–¥–µ–æ)
        logging.info(f"Requesting transcript for {media_type} from user {user_id}")
        prompt_tr = "–°–¥–µ–ª–∞–π —Ç–æ—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏." if media_type == "video_note" else "–°–¥–µ–ª–∞–π —Ç–æ—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏."
        try:
            tr_response = client.generate_content(
                contents=[prompt_tr, media_part],
                generation_config=genai.types.GenerationConfig(model=model_name_to_use)
            )
            results["transcript"] = tr_response.text
            logging.info(f"Received transcript for {media_type} from user {user_id}")
        except Exception as e_tr:
            logging.error(f"Gemini transcript error for user {user_id}: {e_tr}")
            results["transcript"] = f"[–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e_tr}]"

        # 2. –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ)
        if media_type == "video_note":
            logging.info(f"Requesting visuals description for video note from user {user_id}")
            prompt_vis = "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –≤–∏–¥–µ–æ, –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤–∏–¥–Ω—ã, –∫–∞–∫–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞."
            try:
                vis_response = client.generate_content(
                    contents=[prompt_vis, media_part],
                    generation_config=genai.types.GenerationConfig(model=model_name_to_use)
                )
                results["visuals"] = vis_response.text
                logging.info(f"Received visuals description for video note from user {user_id}")
            except Exception as e_vis:
                logging.error(f"Gemini visuals error for user {user_id}: {e_vis}")
                results["visuals"] = f"[–û—à–∏–±–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∞: {e_vis}]"

        # 3. –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–¥–ª—è –≥–æ–ª–æ—Å–∞ –∏ –≤–∏–¥–µ–æ)
        logging.info(f"Requesting summary for {media_type} from user {user_id}")
        prompt_sm = "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ, –æ–±—ä–µ–¥–∏–Ω–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞—É–¥–∏–æ –∏ –≤–∏–∑—É–∞–ª–∞." if media_type == "video_note" else "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —ç—Ç–æ–π –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏."
        try:
            sm_response = client.generate_content(
                contents=[prompt_sm, media_part],
                generation_config=genai.types.GenerationConfig(model=model_name_to_use)
            )
            results["summary"] = sm_response.text
            logging.info(f"Received summary for {media_type} from user {user_id}")
        except Exception as e_sm:
            logging.error(f"Gemini summary error for user {user_id}: {e_sm}")
            results["summary"] = f"[–û—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è: {e_sm}]"

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
        reply_text = ""
        if "transcript" in results:
            reply_text += f"üìÑ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç{' –∞—É–¥–∏–æ' if media_type == 'voice' else ''}:**\n{results['transcript']}\n\n"
        if "visuals" in results:
            reply_text += f"üñºÔ∏è **–í–∏–∑—É–∞–ª:**\n{results['visuals']}\n\n"
        if "summary" in results:
            reply_text += f"üìå **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{results['summary']}"

        reply_text = reply_text.strip()
        if not reply_text:
             reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞."

        await processing_msg.edit_text(reply_text, parse_mode=ParseMode.MARKDOWN)
        await log_to_channel(update, context, reply_text)

    except Exception as e:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ —Ç.–¥.)
        logging.error(f"Error processing {media_type} for user {user_id}: {e}", exc_info=True) # –î–æ–±–∞–≤–∏–º traceback
        await processing_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {media_type}.")
        await log_to_channel(update, context, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {media_type}: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(path):
            os.remove(path)
            logging.info(f"Removed temporary file: {path}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logging.info("Starting bot...")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Conversation Handler –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("convert", ask_for_voice_to_convert)],
        states={
            ASKING_VOICE_FOR_CONVERSION: [MessageHandler(filters.VOICE, convert_ogg_to_mp3_and_reply)]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversion)],
        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
        map_to_parent={
             ConversationHandler.END: ConversationHandler.END,
             # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ—Å–∞
             # ASKING_VOICE_FOR_CONVERSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_during_conversion)]
        }
    )

    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏/—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE & ~filters.COMMAND, handle_media))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE & ~filters.COMMAND, handle_media))

    logging.info("Bot polling started.")
    app.run_polling()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        logging.critical(f"CRITICAL: Unhandled exception in main: {e}", exc_info=True)
